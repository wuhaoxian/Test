// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robot_state.proto

#ifndef PROTOBUF_messages_5frobot_5fstate_2eproto__INCLUDED
#define PROTOBUF_messages_5frobot_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_5frobot_5fstate_2eproto();
void protobuf_AssignDesc_messages_5frobot_5fstate_2eproto();
void protobuf_ShutdownFile_messages_5frobot_5fstate_2eproto();

class Mesg_RobotState;

// ===================================================================

class Mesg_RobotState : public ::google::protobuf::Message {
 public:
  Mesg_RobotState();
  virtual ~Mesg_RobotState();

  Mesg_RobotState(const Mesg_RobotState& from);

  inline Mesg_RobotState& operator=(const Mesg_RobotState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mesg_RobotState& default_instance();

  void Swap(Mesg_RobotState* other);

  // implements Message ----------------------------------------------

  Mesg_RobotState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mesg_RobotState& from);
  void MergeFrom(const Mesg_RobotState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double theta = 3;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 3;
  inline double theta() const;
  inline void set_theta(double value);

  // optional double noise_x = 4;
  inline bool has_noise_x() const;
  inline void clear_noise_x();
  static const int kNoiseXFieldNumber = 4;
  inline double noise_x() const;
  inline void set_noise_x(double value);

  // optional double noise_y = 5;
  inline bool has_noise_y() const;
  inline void clear_noise_y();
  static const int kNoiseYFieldNumber = 5;
  inline double noise_y() const;
  inline void set_noise_y(double value);

  // optional double noise_theta = 6;
  inline bool has_noise_theta() const;
  inline void clear_noise_theta();
  static const int kNoiseThetaFieldNumber = 6;
  inline double noise_theta() const;
  inline void set_noise_theta(double value);

  // optional double vx = 7;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 7;
  inline double vx() const;
  inline void set_vx(double value);

  // optional double vy = 8;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 8;
  inline double vy() const;
  inline void set_vy(double value);

  // optional double w = 9;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 9;
  inline double w() const;
  inline void set_w(double value);

  // optional string timestamp = 10;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional uint32 cycle = 11;
  inline bool has_cycle() const;
  inline void clear_cycle();
  static const int kCycleFieldNumber = 11;
  inline ::google::protobuf::uint32 cycle() const;
  inline void set_cycle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Mesg_RobotState)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_noise_x();
  inline void clear_has_noise_x();
  inline void set_has_noise_y();
  inline void clear_has_noise_y();
  inline void set_has_noise_theta();
  inline void clear_has_noise_theta();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_cycle();
  inline void clear_has_cycle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double theta_;
  double noise_x_;
  double noise_y_;
  double noise_theta_;
  double vx_;
  double vy_;
  double w_;
  ::std::string* timestamp_;
  ::google::protobuf::uint32 cycle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_messages_5frobot_5fstate_2eproto();
  friend void protobuf_AssignDesc_messages_5frobot_5fstate_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobot_5fstate_2eproto();

  void InitAsDefaultInstance();
  static Mesg_RobotState* default_instance_;
};
// ===================================================================


// ===================================================================

// Mesg_RobotState

// required double x = 1;
inline bool Mesg_RobotState::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mesg_RobotState::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mesg_RobotState::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mesg_RobotState::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Mesg_RobotState::x() const {
  return x_;
}
inline void Mesg_RobotState::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool Mesg_RobotState::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mesg_RobotState::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mesg_RobotState::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mesg_RobotState::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Mesg_RobotState::y() const {
  return y_;
}
inline void Mesg_RobotState::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double theta = 3;
inline bool Mesg_RobotState::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mesg_RobotState::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mesg_RobotState::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mesg_RobotState::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double Mesg_RobotState::theta() const {
  return theta_;
}
inline void Mesg_RobotState::set_theta(double value) {
  set_has_theta();
  theta_ = value;
}

// optional double noise_x = 4;
inline bool Mesg_RobotState::has_noise_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mesg_RobotState::set_has_noise_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mesg_RobotState::clear_has_noise_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mesg_RobotState::clear_noise_x() {
  noise_x_ = 0;
  clear_has_noise_x();
}
inline double Mesg_RobotState::noise_x() const {
  return noise_x_;
}
inline void Mesg_RobotState::set_noise_x(double value) {
  set_has_noise_x();
  noise_x_ = value;
}

// optional double noise_y = 5;
inline bool Mesg_RobotState::has_noise_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mesg_RobotState::set_has_noise_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mesg_RobotState::clear_has_noise_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mesg_RobotState::clear_noise_y() {
  noise_y_ = 0;
  clear_has_noise_y();
}
inline double Mesg_RobotState::noise_y() const {
  return noise_y_;
}
inline void Mesg_RobotState::set_noise_y(double value) {
  set_has_noise_y();
  noise_y_ = value;
}

// optional double noise_theta = 6;
inline bool Mesg_RobotState::has_noise_theta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mesg_RobotState::set_has_noise_theta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mesg_RobotState::clear_has_noise_theta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mesg_RobotState::clear_noise_theta() {
  noise_theta_ = 0;
  clear_has_noise_theta();
}
inline double Mesg_RobotState::noise_theta() const {
  return noise_theta_;
}
inline void Mesg_RobotState::set_noise_theta(double value) {
  set_has_noise_theta();
  noise_theta_ = value;
}

// optional double vx = 7;
inline bool Mesg_RobotState::has_vx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mesg_RobotState::set_has_vx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mesg_RobotState::clear_has_vx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mesg_RobotState::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline double Mesg_RobotState::vx() const {
  return vx_;
}
inline void Mesg_RobotState::set_vx(double value) {
  set_has_vx();
  vx_ = value;
}

// optional double vy = 8;
inline bool Mesg_RobotState::has_vy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mesg_RobotState::set_has_vy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Mesg_RobotState::clear_has_vy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Mesg_RobotState::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline double Mesg_RobotState::vy() const {
  return vy_;
}
inline void Mesg_RobotState::set_vy(double value) {
  set_has_vy();
  vy_ = value;
}

// optional double w = 9;
inline bool Mesg_RobotState::has_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Mesg_RobotState::set_has_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Mesg_RobotState::clear_has_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Mesg_RobotState::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Mesg_RobotState::w() const {
  return w_;
}
inline void Mesg_RobotState::set_w(double value) {
  set_has_w();
  w_ = value;
}

// optional string timestamp = 10;
inline bool Mesg_RobotState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Mesg_RobotState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Mesg_RobotState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Mesg_RobotState::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& Mesg_RobotState::timestamp() const {
  return *timestamp_;
}
inline void Mesg_RobotState::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Mesg_RobotState::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Mesg_RobotState::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mesg_RobotState::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* Mesg_RobotState::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mesg_RobotState::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cycle = 11;
inline bool Mesg_RobotState::has_cycle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Mesg_RobotState::set_has_cycle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Mesg_RobotState::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Mesg_RobotState::clear_cycle() {
  cycle_ = 0u;
  clear_has_cycle();
}
inline ::google::protobuf::uint32 Mesg_RobotState::cycle() const {
  return cycle_;
}
inline void Mesg_RobotState::set_cycle(::google::protobuf::uint32 value) {
  set_has_cycle();
  cycle_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_5frobot_5fstate_2eproto__INCLUDED
